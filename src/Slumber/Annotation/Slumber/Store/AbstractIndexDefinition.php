<?php
/**
 * File was created 01.03.2016 12:16
 */

namespace PeekAndPoke\Component\Slumber\Annotation\Slumber\Store;

use PeekAndPoke\Component\Slumber\Annotation\IndexDefinition;
use PeekAndPoke\Component\Slumber\Annotation\SlumberAnnotation;

/**
 * @api
 *
 * @author Karsten J. Gerber <kontakt@karsten-gerber.de>
 */
abstract class AbstractIndexDefinition extends SlumberAnnotation implements IndexDefinition
{
    /**
     * If {@literal true} the index will be created in the background.
     *
     * A background index will not lock / block the database while constructing the index
     *
     * @see http://docs.mongodb.org/manual/core/indexes/#background-construction
     *
     * @var boolean
     */
    public $background = false;

    /**
     * If set to true reject all documents that contain a duplicate value for the indexed field.
     *
     * @see http://docs.mongodb.org/manual/core/index-unique/
     *
     * @var boolean
     */
    public $unique = false;

    /**
     * Where to drop duplicates on creating the index
     *
     * @see http://docs.mongodb.org/manual/core/index-creation/#index-creation-duplicate-dropping
     *
     * @var boolean
     */
    public $dropDups = false;

    /**
     * The direction of the index is important for sorting big amounts of data.
     *
     * @var string
     */
    public $direction = self::ASCENDING;

    /**
     * If set to true index will skip over any document that is missing the indexed field.
     *
     * @see http://docs.mongodb.org/manual/core/index-sparse/
     *
     * @var boolean
     */
    public $sparse = false;

    /**
     * The index name to be used.
     *
     * This will only be used if the index is defined on a root level document, but not when it is defined on a nested
     * sub-document.
     *
     * When left empty an index name will be generated by default.
     *
     * @var string
     */
    public $name;

    /**
     * Configures the number of seconds after which the collection should expire. Defaults to -1 for no expiry.
     *
     * @see http://docs.mongodb.org/manual/tutorial/expire-data/
     *
     * @var int
     */
    public $expireAfterSeconds = -1;

    /**
     * @return boolean
     */
    public function isBackground()
    {
        return (bool) $this->background;
    }

    /**
     * @return boolean
     */
    public function isUnique()
    {
        return (bool) $this->unique;
    }

    /**
     * @return boolean
     */
    public function isDropDups()
    {
        return (bool) $this->dropDups;
    }

    /**
     * @return string
     */
    public function getDirection()
    {
        return (string) $this->direction;
    }

    /**
     * @return boolean
     */
    public function isSparse()
    {
        return (bool) $this->sparse;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return (string) $this->name;
    }

    /**
     * @return int
     */
    public function getExpireAfterSeconds()
    {
        return (int) $this->expireAfterSeconds;
    }
}
